'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rxConstants = require('./rxConstants');

var _rxApi = require('./rxApi');

var _Observable = require('rxjs/Observable');

require('rxjs/add/observable/interval');

require('rxjs/add/operator/catch');

require('rxjs/add/operator/takeUntil');

require('rxjs/add/operator/map');

require('rxjs/add/operator/mergeMap');

var nodeStatus = function nodeStatus(action$, store, _ref) {
  var wsAPI = _ref.wsAPI;
  return action$.ofType(_rxConstants.GET_NODE_STATUS).mergeMap(function () {
    return (0, _rxApi.getNodeStauts)(wsAPI, store.getState().meta.sid);
  }).map(function (payload) {
    return { type: _rxConstants.GET_NODE_STATUS_SUCCESS, payload: payload };
  }).catch([{ type: _rxConstants.GET_NODE_STATUS_ERROR }]);
};

var runTimer = function runTimer(action$, store) {
  return action$.ofType.apply(action$, [_rxConstants.GET_NODE_STATUS_SUCCESS, _rxConstants.TIMER_START]).mergeMap(function () {
    return _Observable.Observable.interval(store.getState().rx.interval).takeUntil(action$.ofType(_rxConstants.TIMER_STOP)).map(function () {
      return { type: _rxConstants.INTERVAL_GET };
    });
  });
};

var getSignal = function getSignal(action$, _ref2, _ref3) {
  var getState = _ref2.getState;
  var wsAPI = _ref3.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_SIGNAL, _rxConstants.INTERVAL_GET]).switchMap(function () {
    return (0, _rxApi.getStationSignal)(wsAPI, getState().meta.sid, getState().rx.data.most_active);
  }).map(function (signal) {
    return { type: _rxConstants.GET_SIGNAL_SUCCESS, payload: signal };
  });
};

var getTraffic = function getTraffic(action$, _ref4, _ref5) {
  var getState = _ref4.getState;
  var wsAPI = _ref5.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_TRAFFIC, _rxConstants.INTERVAL_GET]).switchMap(function () {
    return (0, _rxApi.getStationTraffic)(wsAPI, getState().meta.sid, getState().rx.data.most_active);
  }).map(function (signal) {
    return { type: _rxConstants.GET_TRAFFIC_SUCCESS, payload: signal };
  });
};

var getInternet = function getInternet(action$, _ref6, _ref7) {
  var getState = _ref6.getState;
  var wsAPI = _ref7.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_NODE_STATUS_SUCCESS]).switchMap(function () {
    return (0, _rxApi.getInternetStatus)(wsAPI, getState().meta.sid);
  }).map(function (status) {
    return { type: _rxConstants.GET_INTERNET_STATUS_SUCCESS, payload: status };
  });
};

exports.default = {
  nodeStatus: nodeStatus, runTimer: runTimer, getSignal: getSignal, getTraffic: getTraffic, getInternet: getInternet
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yeEVwaWNzLmpzIl0sIm5hbWVzIjpbIm5vZGVTdGF0dXMiLCJhY3Rpb24kIiwic3RvcmUiLCJ3c0FQSSIsIm9mVHlwZSIsIm1lcmdlTWFwIiwiZ2V0U3RhdGUiLCJtZXRhIiwic2lkIiwibWFwIiwidHlwZSIsInBheWxvYWQiLCJjYXRjaCIsInJ1blRpbWVyIiwiaW50ZXJ2YWwiLCJyeCIsInRha2VVbnRpbCIsImdldFNpZ25hbCIsInN3aXRjaE1hcCIsImRhdGEiLCJtb3N0X2FjdGl2ZSIsInNpZ25hbCIsImdldFRyYWZmaWMiLCJnZXRJbnRlcm5ldCIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBZ0JBOztBQU9BOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGFBQWEsU0FBYkEsVUFBYSxDQUFFQyxPQUFGLEVBQVdDLEtBQVg7QUFBQSxNQUFvQkMsS0FBcEIsUUFBb0JBLEtBQXBCO0FBQUEsU0FDakJGLFFBQVFHLE1BQVIsK0JBQ0dDLFFBREgsQ0FDWTtBQUFBLFdBQU0sMEJBQWNGLEtBQWQsRUFBcUJELE1BQU1JLFFBQU4sR0FBaUJDLElBQWpCLENBQXNCQyxHQUEzQyxDQUFOO0FBQUEsR0FEWixFQUVHQyxHQUZILENBRVE7QUFBQSxXQUFZLEVBQUVDLDBDQUFGLEVBQWlDQyxnQkFBakMsRUFBWjtBQUFBLEdBRlIsRUFHR0MsS0FISCxDQUdVLENBQUMsRUFBQ0Ysd0NBQUQsRUFBRCxDQUhWLENBRGlCO0FBQUEsQ0FBbkI7O0FBT0EsSUFBTUcsV0FBVyxTQUFYQSxRQUFXLENBQUVaLE9BQUYsRUFBV0MsS0FBWDtBQUFBLFNBQ2ZELFFBQVFHLE1BQVIsZ0JBQWtCLGdFQUFsQixFQUNHQyxRQURILENBQ1ksWUFBTTtBQUNkLFdBQU8sdUJBQVdTLFFBQVgsQ0FBb0JaLE1BQU1JLFFBQU4sR0FBaUJTLEVBQWpCLENBQW9CRCxRQUF4QyxFQUNKRSxTQURJLENBQ01mLFFBQVFHLE1BQVIseUJBRE4sRUFFSkssR0FGSSxDQUVBO0FBQUEsYUFBTyxFQUFFQywrQkFBRixFQUFQO0FBQUEsS0FGQSxDQUFQO0FBR0QsR0FMSCxDQURlO0FBQUEsQ0FBakI7O0FBUUEsSUFBTU8sWUFBWSxTQUFaQSxTQUFZLENBQUVoQixPQUFGO0FBQUEsTUFBYUssUUFBYixTQUFhQSxRQUFiO0FBQUEsTUFBMEJILEtBQTFCLFNBQTBCQSxLQUExQjtBQUFBLFNBQ2hCRixRQUFRRyxNQUFSLGdCQUFrQixvREFBbEIsRUFDR2MsU0FESCxDQUNhO0FBQUEsV0FBTSw2QkFBaUJmLEtBQWpCLEVBQXdCRyxXQUFXQyxJQUFYLENBQWdCQyxHQUF4QyxFQUE2Q0YsV0FBV1MsRUFBWCxDQUFjSSxJQUFkLENBQW1CQyxXQUFoRSxDQUFOO0FBQUEsR0FEYixFQUVLWCxHQUZMLENBRVU7QUFBQSxXQUFXLEVBQUVDLHFDQUFGLEVBQTRCQyxTQUFTVSxNQUFyQyxFQUFYO0FBQUEsR0FGVixDQURnQjtBQUFBLENBQWxCOztBQUtBLElBQU1DLGFBQWEsU0FBYkEsVUFBYSxDQUFFckIsT0FBRjtBQUFBLE1BQWFLLFFBQWIsU0FBYUEsUUFBYjtBQUFBLE1BQTBCSCxLQUExQixTQUEwQkEsS0FBMUI7QUFBQSxTQUNqQkYsUUFBUUcsTUFBUixnQkFBa0IscURBQWxCLEVBQ0djLFNBREgsQ0FDYTtBQUFBLFdBQU0sOEJBQWtCZixLQUFsQixFQUF5QkcsV0FBV0MsSUFBWCxDQUFnQkMsR0FBekMsRUFBOENGLFdBQVdTLEVBQVgsQ0FBY0ksSUFBZCxDQUFtQkMsV0FBakUsQ0FBTjtBQUFBLEdBRGIsRUFFS1gsR0FGTCxDQUVVO0FBQUEsV0FBVyxFQUFFQyxzQ0FBRixFQUE2QkMsU0FBU1UsTUFBdEMsRUFBWDtBQUFBLEdBRlYsQ0FEaUI7QUFBQSxDQUFuQjs7QUFLQSxJQUFNRSxjQUFjLFNBQWRBLFdBQWMsQ0FBRXRCLE9BQUY7QUFBQSxNQUFhSyxRQUFiLFNBQWFBLFFBQWI7QUFBQSxNQUEwQkgsS0FBMUIsU0FBMEJBLEtBQTFCO0FBQUEsU0FDbEJGLFFBQVFHLE1BQVIsZ0JBQWtCLHNDQUFsQixFQUNHYyxTQURILENBQ2E7QUFBQSxXQUFNLDhCQUFrQmYsS0FBbEIsRUFBeUJHLFdBQVdDLElBQVgsQ0FBZ0JDLEdBQXpDLENBQU47QUFBQSxHQURiLEVBRUtDLEdBRkwsQ0FFVTtBQUFBLFdBQVcsRUFBRUMsOENBQUYsRUFBcUNDLFNBQVNhLE1BQTlDLEVBQVg7QUFBQSxHQUZWLENBRGtCO0FBQUEsQ0FBcEI7O2tCQU1lO0FBQ2J4Qix3QkFEYSxFQUNEYSxrQkFEQyxFQUNTSSxvQkFEVCxFQUNvQkssc0JBRHBCLEVBQ2dDQztBQURoQyxDIiwiZmlsZSI6InJ4RXBpY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBHRVRfTk9ERV9TVEFUVVMsXG4gIEdFVF9OT0RFX1NUQVRVU19FUlJPUixcbiAgR0VUX05PREVfU1RBVFVTX1NVQ0NFU1MsXG4gIFRJTUVSX1NUQVJULFxuICBUSU1FUl9TVE9QLFxuICBJTlRFUlZBTF9HRVQsXG4gIEdFVF9TSUdOQUwsXG4gIEdFVF9TSUdOQUxfU1VDQ0VTUyxcbiAgR0VUX1RSQUZGSUMsXG4gIEdFVF9UUkFGRklDX1NVQ0NFU1MsXG4gIEdFVF9JTlRFUk5FVF9TVEFUVVMsXG4gIEdFVF9JTlRFUk5FVF9TVEFUVVNfU1VDQ0VTU1xuXG59IGZyb20gJy4vcnhDb25zdGFudHMnO1xuXG5pbXBvcnQge1xuICBnZXROb2RlU3RhdXRzLFxuICBnZXRTdGF0aW9uU2lnbmFsLFxuICBnZXRTdGF0aW9uVHJhZmZpYyxcbiAgZ2V0SW50ZXJuZXRTdGF0dXNcbn0gZnJvbSAnLi9yeEFwaSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuXG5pbXBvcnQgJ3J4anMvYWRkL29ic2VydmFibGUvaW50ZXJ2YWwnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9jYXRjaCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL3Rha2VVbnRpbCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21hcCc7XG5pbXBvcnQgJ3J4anMvYWRkL29wZXJhdG9yL21lcmdlTWFwJztcblxuY29uc3Qgbm9kZVN0YXR1cyA9ICggYWN0aW9uJCwgc3RvcmUsIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKEdFVF9OT0RFX1NUQVRVUylcbiAgICAubWVyZ2VNYXAoKCkgPT4gZ2V0Tm9kZVN0YXV0cyh3c0FQSSwgc3RvcmUuZ2V0U3RhdGUoKS5tZXRhLnNpZCkpXG4gICAgLm1hcCggcGF5bG9hZCA9PiAoeyB0eXBlOiBHRVRfTk9ERV9TVEFUVVNfU1VDQ0VTUywgcGF5bG9hZCB9KSlcbiAgICAuY2F0Y2goKFt7dHlwZTpHRVRfTk9ERV9TVEFUVVNfRVJST1J9XSkpO1xuXG4gIFxuY29uc3QgcnVuVGltZXIgPSAoIGFjdGlvbiQsIHN0b3JlICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoLi4uW0dFVF9OT0RFX1NUQVRVU19TVUNDRVNTLCBUSU1FUl9TVEFSVF0pXG4gICAgLm1lcmdlTWFwKCgpID0+IHtcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLmludGVydmFsKHN0b3JlLmdldFN0YXRlKCkucnguaW50ZXJ2YWwpXG4gICAgICAgIC50YWtlVW50aWwoYWN0aW9uJC5vZlR5cGUoVElNRVJfU1RPUCkpXG4gICAgICAgIC5tYXAoKCkgPT4gKHsgdHlwZTogSU5URVJWQUxfR0VUIH0pKTtcbiAgICB9KTtcblxuY29uc3QgZ2V0U2lnbmFsID0gKCBhY3Rpb24kLCB7IGdldFN0YXRlfSwgeyB3c0FQSSB9ICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoLi4uW0dFVF9TSUdOQUwsSU5URVJWQUxfR0VUXSlcbiAgICAuc3dpdGNoTWFwKCgpID0+IGdldFN0YXRpb25TaWduYWwod3NBUEksIGdldFN0YXRlKCkubWV0YS5zaWQsIGdldFN0YXRlKCkucnguZGF0YS5tb3N0X2FjdGl2ZSkpXG4gICAgICAubWFwKCBzaWduYWwgPT4gKHsgdHlwZTogR0VUX1NJR05BTF9TVUNDRVNTLCBwYXlsb2FkOiBzaWduYWwgfSkpO1xuXG5jb25zdCBnZXRUcmFmZmljID0gKCBhY3Rpb24kLCB7IGdldFN0YXRlfSwgeyB3c0FQSSB9ICkgPT5cbiAgYWN0aW9uJC5vZlR5cGUoLi4uW0dFVF9UUkFGRklDLElOVEVSVkFMX0dFVF0pXG4gICAgLnN3aXRjaE1hcCgoKSA9PiBnZXRTdGF0aW9uVHJhZmZpYyh3c0FQSSwgZ2V0U3RhdGUoKS5tZXRhLnNpZCwgZ2V0U3RhdGUoKS5yeC5kYXRhLm1vc3RfYWN0aXZlKSlcbiAgICAgIC5tYXAoIHNpZ25hbCA9PiAoeyB0eXBlOiBHRVRfVFJBRkZJQ19TVUNDRVNTLCBwYXlsb2FkOiBzaWduYWwgfSkpO1xuXG5jb25zdCBnZXRJbnRlcm5ldCA9ICggYWN0aW9uJCwgeyBnZXRTdGF0ZX0sIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKC4uLltHRVRfTk9ERV9TVEFUVVNfU1VDQ0VTU10pXG4gICAgLnN3aXRjaE1hcCgoKSA9PiBnZXRJbnRlcm5ldFN0YXR1cyh3c0FQSSwgZ2V0U3RhdGUoKS5tZXRhLnNpZCkpXG4gICAgICAubWFwKCBzdGF0dXMgPT4gKHsgdHlwZTogR0VUX0lOVEVSTkVUX1NUQVRVU19TVUNDRVNTLCBwYXlsb2FkOiBzdGF0dXMgfSkpO1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbm9kZVN0YXR1cywgcnVuVGltZXIsIGdldFNpZ25hbCwgZ2V0VHJhZmZpYywgZ2V0SW50ZXJuZXRcbn07Il19