'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _rxConstants = require('./rxConstants');

var _rxApi = require('./rxApi');

var _Rx = require('rxjs/Rx');

require('rxjs/add/observable/interval');

require('rxjs/add/operator/catch');

require('rxjs/add/operator/takeUntil');

require('rxjs/add/operator/map');

require('rxjs/add/operator/mergeMap');

var nodeStatus = function nodeStatus(action$, store, _ref) {
  var wsAPI = _ref.wsAPI;
  return action$.ofType(_rxConstants.GET_NODE_STATUS).mergeMap(function () {
    return (0, _rxApi.getNodeStauts)(wsAPI, store.getState().meta.sid);
  }).map(function (payload) {
    return { type: _rxConstants.GET_NODE_STATUS_SUCCESS, payload: payload };
  }).catch([{ type: _rxConstants.GET_NODE_STATUS_ERROR }]);
};

var runTimer = function runTimer(action$, store) {
  return action$.ofType.apply(action$, [_rxConstants.GET_NODE_STATUS_SUCCESS, _rxConstants.TIMER_START]).mergeMap(function () {
    return _Rx.Observable.interval(store.getState().rx.interval).takeUntil(action$.ofType(_rxConstants.TIMER_STOP)).map(function () {
      return { type: _rxConstants.INTERVAL_GET };
    });
  });
};

var getSignal = function getSignal(action$, _ref2, _ref3) {
  var getState = _ref2.getState;
  var wsAPI = _ref3.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_SIGNAL, _rxConstants.INTERVAL_GET]).switchMap(function () {
    return (0, _rxApi.getStationSignal)(wsAPI, getState().meta.sid, getState().rx.data.most_active);
  }).map(function (signal) {
    return { type: _rxConstants.GET_SIGNAL_SUCCESS, payload: signal };
  });
};

var getTraffic = function getTraffic(action$, _ref4, _ref5) {
  var getState = _ref4.getState;
  var wsAPI = _ref5.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_TRAFFIC, _rxConstants.INTERVAL_GET]).switchMap(function () {
    return (0, _rxApi.getStationTraffic)(wsAPI, getState().meta.sid, getState().rx.data.most_active);
  }).map(function (signal) {
    return { type: _rxConstants.GET_TRAFFIC_SUCCESS, payload: signal };
  });
};

var getInternet = function getInternet(action$, _ref6, _ref7) {
  var getState = _ref6.getState;
  var wsAPI = _ref7.wsAPI;
  return action$.ofType.apply(action$, [_rxConstants.GET_NODE_STATUS_SUCCESS]).switchMap(function () {
    return (0, _rxApi.getInternetStatus)(wsAPI, getState().meta.sid);
  }).map(function (status) {
    return { type: _rxConstants.GET_INTERNET_STATUS_SUCCESS, payload: status };
  });
};

exports.default = {
  nodeStatus: nodeStatus, runTimer: runTimer, getSignal: getSignal, getTraffic: getTraffic, getInternet: getInternet
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yeEVwaWNzLmpzIl0sIm5hbWVzIjpbIm5vZGVTdGF0dXMiLCJhY3Rpb24kIiwic3RvcmUiLCJ3c0FQSSIsIm9mVHlwZSIsIm1lcmdlTWFwIiwiZ2V0U3RhdGUiLCJtZXRhIiwic2lkIiwibWFwIiwidHlwZSIsInBheWxvYWQiLCJjYXRjaCIsInJ1blRpbWVyIiwiaW50ZXJ2YWwiLCJyeCIsInRha2VVbnRpbCIsImdldFNpZ25hbCIsInN3aXRjaE1hcCIsImRhdGEiLCJtb3N0X2FjdGl2ZSIsInNpZ25hbCIsImdldFRyYWZmaWMiLCJnZXRJbnRlcm5ldCIsInN0YXR1cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBZ0JBOztBQU9BOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLGFBQWEsU0FBYkEsVUFBYSxDQUFFQyxPQUFGLEVBQVdDLEtBQVg7QUFBQSxNQUFvQkMsS0FBcEIsUUFBb0JBLEtBQXBCO0FBQUEsU0FDakJGLFFBQVFHLE1BQVIsK0JBQ0dDLFFBREgsQ0FDWTtBQUFBLFdBQU0sMEJBQWNGLEtBQWQsRUFBcUJELE1BQU1JLFFBQU4sR0FBaUJDLElBQWpCLENBQXNCQyxHQUEzQyxDQUFOO0FBQUEsR0FEWixFQUVHQyxHQUZILENBRVE7QUFBQSxXQUFZLEVBQUVDLDBDQUFGLEVBQWlDQyxnQkFBakMsRUFBWjtBQUFBLEdBRlIsRUFHR0MsS0FISCxDQUdVLENBQUMsRUFBQ0Ysd0NBQUQsRUFBRCxDQUhWLENBRGlCO0FBQUEsQ0FBbkI7O0FBT0EsSUFBTUcsV0FBVyxTQUFYQSxRQUFXLENBQUVaLE9BQUYsRUFBV0MsS0FBWDtBQUFBLFNBQ2ZELFFBQVFHLE1BQVIsZ0JBQWtCLGdFQUFsQixFQUNHQyxRQURILENBQ1ksWUFBTTtBQUNkLFdBQU8sZUFBV1MsUUFBWCxDQUFvQlosTUFBTUksUUFBTixHQUFpQlMsRUFBakIsQ0FBb0JELFFBQXhDLEVBQ0pFLFNBREksQ0FDTWYsUUFBUUcsTUFBUix5QkFETixFQUVKSyxHQUZJLENBRUE7QUFBQSxhQUFPLEVBQUVDLCtCQUFGLEVBQVA7QUFBQSxLQUZBLENBQVA7QUFHRCxHQUxILENBRGU7QUFBQSxDQUFqQjs7QUFRQSxJQUFNTyxZQUFZLFNBQVpBLFNBQVksQ0FBRWhCLE9BQUY7QUFBQSxNQUFhSyxRQUFiLFNBQWFBLFFBQWI7QUFBQSxNQUEwQkgsS0FBMUIsU0FBMEJBLEtBQTFCO0FBQUEsU0FDaEJGLFFBQVFHLE1BQVIsZ0JBQWtCLG9EQUFsQixFQUNHYyxTQURILENBQ2E7QUFBQSxXQUFNLDZCQUFpQmYsS0FBakIsRUFBd0JHLFdBQVdDLElBQVgsQ0FBZ0JDLEdBQXhDLEVBQTZDRixXQUFXUyxFQUFYLENBQWNJLElBQWQsQ0FBbUJDLFdBQWhFLENBQU47QUFBQSxHQURiLEVBRUtYLEdBRkwsQ0FFVTtBQUFBLFdBQVcsRUFBRUMscUNBQUYsRUFBNEJDLFNBQVNVLE1BQXJDLEVBQVg7QUFBQSxHQUZWLENBRGdCO0FBQUEsQ0FBbEI7O0FBS0EsSUFBTUMsYUFBYSxTQUFiQSxVQUFhLENBQUVyQixPQUFGO0FBQUEsTUFBYUssUUFBYixTQUFhQSxRQUFiO0FBQUEsTUFBMEJILEtBQTFCLFNBQTBCQSxLQUExQjtBQUFBLFNBQ2pCRixRQUFRRyxNQUFSLGdCQUFrQixxREFBbEIsRUFDR2MsU0FESCxDQUNhO0FBQUEsV0FBTSw4QkFBa0JmLEtBQWxCLEVBQXlCRyxXQUFXQyxJQUFYLENBQWdCQyxHQUF6QyxFQUE4Q0YsV0FBV1MsRUFBWCxDQUFjSSxJQUFkLENBQW1CQyxXQUFqRSxDQUFOO0FBQUEsR0FEYixFQUVLWCxHQUZMLENBRVU7QUFBQSxXQUFXLEVBQUVDLHNDQUFGLEVBQTZCQyxTQUFTVSxNQUF0QyxFQUFYO0FBQUEsR0FGVixDQURpQjtBQUFBLENBQW5COztBQUtBLElBQU1FLGNBQWMsU0FBZEEsV0FBYyxDQUFFdEIsT0FBRjtBQUFBLE1BQWFLLFFBQWIsU0FBYUEsUUFBYjtBQUFBLE1BQTBCSCxLQUExQixTQUEwQkEsS0FBMUI7QUFBQSxTQUNsQkYsUUFBUUcsTUFBUixnQkFBa0Isc0NBQWxCLEVBQ0djLFNBREgsQ0FDYTtBQUFBLFdBQU0sOEJBQWtCZixLQUFsQixFQUF5QkcsV0FBV0MsSUFBWCxDQUFnQkMsR0FBekMsQ0FBTjtBQUFBLEdBRGIsRUFFS0MsR0FGTCxDQUVVO0FBQUEsV0FBVyxFQUFFQyw4Q0FBRixFQUFxQ0MsU0FBU2EsTUFBOUMsRUFBWDtBQUFBLEdBRlYsQ0FEa0I7QUFBQSxDQUFwQjs7a0JBTWU7QUFDYnhCLHdCQURhLEVBQ0RhLGtCQURDLEVBQ1NJLG9CQURULEVBQ29CSyxzQkFEcEIsRUFDZ0NDO0FBRGhDLEMiLCJmaWxlIjoicnhFcGljcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdFVF9OT0RFX1NUQVRVUyxcbiAgR0VUX05PREVfU1RBVFVTX0VSUk9SLFxuICBHRVRfTk9ERV9TVEFUVVNfU1VDQ0VTUyxcbiAgVElNRVJfU1RBUlQsXG4gIFRJTUVSX1NUT1AsXG4gIElOVEVSVkFMX0dFVCxcbiAgR0VUX1NJR05BTCxcbiAgR0VUX1NJR05BTF9TVUNDRVNTLFxuICBHRVRfVFJBRkZJQyxcbiAgR0VUX1RSQUZGSUNfU1VDQ0VTUyxcbiAgR0VUX0lOVEVSTkVUX1NUQVRVUyxcbiAgR0VUX0lOVEVSTkVUX1NUQVRVU19TVUNDRVNTXG5cbn0gZnJvbSAnLi9yeENvbnN0YW50cyc7XG5cbmltcG9ydCB7XG4gIGdldE5vZGVTdGF1dHMsXG4gIGdldFN0YXRpb25TaWduYWwsXG4gIGdldFN0YXRpb25UcmFmZmljLFxuICBnZXRJbnRlcm5ldFN0YXR1c1xufSBmcm9tICcuL3J4QXBpJztcblxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzL1J4JztcblxuaW1wb3J0ICdyeGpzL2FkZC9vYnNlcnZhYmxlL2ludGVydmFsJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvY2F0Y2gnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci90YWtlVW50aWwnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tZXJnZU1hcCc7XG5cbmNvbnN0IG5vZGVTdGF0dXMgPSAoIGFjdGlvbiQsIHN0b3JlLCB7IHdzQVBJIH0gKSA9PlxuICBhY3Rpb24kLm9mVHlwZShHRVRfTk9ERV9TVEFUVVMpXG4gICAgLm1lcmdlTWFwKCgpID0+IGdldE5vZGVTdGF1dHMod3NBUEksIHN0b3JlLmdldFN0YXRlKCkubWV0YS5zaWQpKVxuICAgIC5tYXAoIHBheWxvYWQgPT4gKHsgdHlwZTogR0VUX05PREVfU1RBVFVTX1NVQ0NFU1MsIHBheWxvYWQgfSkpXG4gICAgLmNhdGNoKChbe3R5cGU6R0VUX05PREVfU1RBVFVTX0VSUk9SfV0pKTtcblxuICBcbmNvbnN0IHJ1blRpbWVyID0gKCBhY3Rpb24kLCBzdG9yZSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKC4uLltHRVRfTk9ERV9TVEFUVVNfU1VDQ0VTUywgVElNRVJfU1RBUlRdKVxuICAgIC5tZXJnZU1hcCgoKSA9PiB7XG4gICAgICByZXR1cm4gT2JzZXJ2YWJsZS5pbnRlcnZhbChzdG9yZS5nZXRTdGF0ZSgpLnJ4LmludGVydmFsKVxuICAgICAgICAudGFrZVVudGlsKGFjdGlvbiQub2ZUeXBlKFRJTUVSX1NUT1ApKVxuICAgICAgICAubWFwKCgpID0+ICh7IHR5cGU6IElOVEVSVkFMX0dFVCB9KSk7XG4gICAgfSk7XG5cbmNvbnN0IGdldFNpZ25hbCA9ICggYWN0aW9uJCwgeyBnZXRTdGF0ZX0sIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKC4uLltHRVRfU0lHTkFMLElOVEVSVkFMX0dFVF0pXG4gICAgLnN3aXRjaE1hcCgoKSA9PiBnZXRTdGF0aW9uU2lnbmFsKHdzQVBJLCBnZXRTdGF0ZSgpLm1ldGEuc2lkLCBnZXRTdGF0ZSgpLnJ4LmRhdGEubW9zdF9hY3RpdmUpKVxuICAgICAgLm1hcCggc2lnbmFsID0+ICh7IHR5cGU6IEdFVF9TSUdOQUxfU1VDQ0VTUywgcGF5bG9hZDogc2lnbmFsIH0pKTtcblxuY29uc3QgZ2V0VHJhZmZpYyA9ICggYWN0aW9uJCwgeyBnZXRTdGF0ZX0sIHsgd3NBUEkgfSApID0+XG4gIGFjdGlvbiQub2ZUeXBlKC4uLltHRVRfVFJBRkZJQyxJTlRFUlZBTF9HRVRdKVxuICAgIC5zd2l0Y2hNYXAoKCkgPT4gZ2V0U3RhdGlvblRyYWZmaWMod3NBUEksIGdldFN0YXRlKCkubWV0YS5zaWQsIGdldFN0YXRlKCkucnguZGF0YS5tb3N0X2FjdGl2ZSkpXG4gICAgICAubWFwKCBzaWduYWwgPT4gKHsgdHlwZTogR0VUX1RSQUZGSUNfU1VDQ0VTUywgcGF5bG9hZDogc2lnbmFsIH0pKTtcblxuY29uc3QgZ2V0SW50ZXJuZXQgPSAoIGFjdGlvbiQsIHsgZ2V0U3RhdGV9LCB7IHdzQVBJIH0gKSA9PlxuICBhY3Rpb24kLm9mVHlwZSguLi5bR0VUX05PREVfU1RBVFVTX1NVQ0NFU1NdKVxuICAgIC5zd2l0Y2hNYXAoKCkgPT4gZ2V0SW50ZXJuZXRTdGF0dXMod3NBUEksIGdldFN0YXRlKCkubWV0YS5zaWQpKVxuICAgICAgLm1hcCggc3RhdHVzID0+ICh7IHR5cGU6IEdFVF9JTlRFUk5FVF9TVEFUVVNfU1VDQ0VTUywgcGF5bG9hZDogc3RhdHVzIH0pKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5vZGVTdGF0dXMsIHJ1blRpbWVyLCBnZXRTaWduYWwsIGdldFRyYWZmaWMsIGdldEludGVybmV0XG59OyJdfQ==